[user]

[init]
    defaultBranch = main

[alias]
    ## 'New' Commands
    # Unstage the changes in a given file.
    unstage = reset HEAD --
    # View the current changes in the staging area.
    staged = diff --cached
    # Print the name of the current branch.
    current-branch = symbolic-ref --short HEAD
    # Print the name of the current upstream tracking branch.
    upstream = !git config --get branch.$(git current-branch).remote || echo origin
    # Push the current branch upstream to origin using the same branch name for the remote branch.
    upstream-current-branch = !git push --set-upstream origin $(git current-branch)
    # Create a pull request on GitHub using the `gh` command.
    pull-request = !rm -f .git/PULLREQ_EDITMSG && gh pr create --web
    # Upstream the current branch to origin and create a pull request on GitHub.
    upstream-and-pull-request = !git upstream-current-branch && git pull-request
    # Push the current branch and set it as the default upstream branch.
    push-and-set-upstream = push --set-upstream
    # Create a new branch by checking out another branch.
    checkout-as-new-branch = checkout -b
    # Rebase against origin/HEAD and prompt for what operations should be performed.
    interactively-rebase-against-origin-head = !git rebase --interactive origin/HEAD
    # Commit any changes to files, squash them into the last commit and update its date.
    fix-up-previous-commit = !git commit --all --amend --reuse-message=HEAD --date=\"$(date)\" #"
    # Commit a work-in-progress commit (to use with fix-up-previous-commit)
    work-in-progress = commit -a -m 'WIP'
    # Hard reset branch to the upstream version.
    hard-reset = !git reset --hard $(git upstream)/$(git current-branch)
    # Delete all non-master/main branches
    delete-merged = !git branch --merged | grep -v 'master' | grep -v 'main' | grep -v '*' | xargs -n 1 git branch -D
    # Get the merge-base compared to origin/HEAD
    merge-base-head = merge-base origin/HEAD HEAD
    # Diff against the current branch's merge-base
    diff-merge-base = !git diff $(git merge-base-head)

    s = status -u
    a = add
    ps = push
    pl = pull
    pus = push
    pul = pull
    f = fetch
    d = diff
    df = diff
    dc = diff --cached
    dfc = diff --cached
    co = checkout
    cob = checkout -b
    com = checkout main
    b = branch
    bra = branch
    c = commit
    cm = commit -m
    cam = commit -a -m
    last = log -1 HEAD
    aliases = config --get-regexp alias
    remotes = remote -v
    tags = tag
    l = log --graph --pretty='%C(yellow)%h%Creset %C(cyan bold)%d%Creset %s %Cgreen[%cd] %C(bold blue)<%an> %Creset' --decorate --date=iso
    tree = log --graph --all --format=format:\"%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)? %an%C(reset)%C(bold yellow)%d%C(reset)\" --abbrev-commit --date=relative

[core]
    pager = delta
    quotepath = false

[color]
    ui = true

[merge]
    ff = false

[pull]
    ff = only

[fetch]
    prune = true

[push]
    # Always push tags, see https://git-scm.com/docs/git-config#git-config-pushfollowTags.
    followTags = true

[pager]
    branch = less -FRX

[delta]
    features = line-numbers
    plus-style = bold green
    plus-non-emph-style = brightgreen
    plus-emph-style = bold green 22
    minus-style = bold red
    minus-non-emph-style = brightred
    minus-emph-style = bold red 52
    syntax-theme = Dracula
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = yellow
    hunk-header-style = cyan
    hunk-header-decoration-style = cyan ul

[delta "line-numbers"]
    line-numbers = true
    line-numbers-left-style = cyan
    line-numbers-right-style = cyan
    line-numbers-minus-style = 124
    line-numbers-plus-style = 28

[diff]
    colorMoved = default

[diff "bin"]
    # Use `hexdump` to diff binary files.
    textconv = hexdump -v -C

[interactive]
    diffFilter = delta --color-only

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

# https://stackoverflow.com/questions/16244969/how-to-tell-git-to-ignore-individual-lines-i-e-gitignore-for-specific-lines-of
# If a filter named "gitignore" is applied, lines that end with "# gitignore" are ignored
[filter "gitignore"]
    clean = "sed -E '/# ?gitignore$/d'"
    smudge = cat

[advice]
    addIgnoredFile = false

[protocol]
    # Use Git v2 protocol for better performance
    # TODO: re-enable when more widely supported by Git versions
    version = 2

# [ghq]
#     root = ~/Projects
